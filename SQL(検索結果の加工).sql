/*
	【SQLの共通ルール】
	① : 文の途中に開業を入れられる
	② : 行の先頭や行の途中に半角の空白を入れられる
	
	改行を適切に入れて見やすくする(しっかりと整形する)
	予約語を大文字、小文字どちらでも同じ意味になるが、それを区別するかはOSや設定によって異なる
	
	SQL文はプログラムからドライバを通してDBMSへネットワークと通して送られる
	DBMSでSQL文を解釈し、中にあるデータベースファイル(単なるファイル)の中身を書き換える
	
	【４大命令】
	・構造と修飾語(whereなど)をしっかり把握する
	・ほとんどのデータ操作(テーブルやカラムじゃないよ)はSELECT, UPDATE, DALETE, INSERTで実現される
	・DML(Data Manipulation Language)と呼ばれる
	・最低限のSQL文として完成しているものをSQL文という
	・from 000 や where 000 をfrom句やwhere句という
	・UPDATEはSET句と使う(列名=値 WHERE句で行を指定しないと全件更新になる)
	
	【覚え方１】
	・検索系(SELECT)、更新系(INSERT, DELETE, UPDATE)を理解すると覚えやすい
	・更新系は実行結果が常に成功か失敗の２通りで、表が返されることはない
	・更新系はp53の「検索結果の加工(一番右)」に当たる処理ができない(表が返ってくるわけではないので)
	・検索系は"検索結果の加工"ができる
	
	【覚え方２】
	・既存系(SELECT, UPDATE, DELETE)、新規系(INSERT)
	・INSERTは新規なので、WHEREが使えない
	
	【覚え方３】
	・4大命令は全て処理対象とするテーブル名を指定する必要がある
	・テーブル名より先に記述があるのはSELECT文のみ
	
	
*/


/*家計簿
+------------+-----------------+--------------------------+--------+--------+
| date_time  | items           | memos                    | input  | output |
+------------+-----------------+--------------------------+--------+--------+
| 2013-02-03 | 食費            | カフェラテを購入         |      0 |    380 |
| 2013-02-10 | 給料            | １月の給料               | 280000 |      0 |
| 2013-02-11 | 教養娯楽費      | 書籍を購入               |      0 |   2800 |
| 2013-02-14 | 交際費          | 同期会の会費             |      0 |   5000 |
| 2013-02-18 | 水道光熱費      | 1月の電気代              |      0 |   7500 |
| 2013-02-25 | 居住費          | 3月の家賃                |      0 |  90000 |
+------------+-----------------+--------------------------+--------+--------+

*/


/*
	【検索結果の加工】
	・２段階に分ける
		① : 通常の検索 ② : 検索結果の加工
	
	・DISTINCT : 検索結果から重複行を除外する
	・ORDER BY : 検索結果の順序を並び替える (ASC, DESC)
	・LIMIT : 検索結果から件数を限定して取得する
	・UNION : 検索結果に他の検索結果を足し合わせる
	・EXCEPT : 検索結果から他の検索結果を差し引く
	・INTERSECT : 検索結果と他の検索結果の重複部分を取得する
	
	
*/

/*
	【distinct】
	・distinctは他の修飾語と違いselect文の最初に記述する必要がある
	
*/

select distinct * 
	from kakeibo
	where input;
	


/*
	【order by】
	・order by句は最後にカンマで区切れて、最初が優先
	・デフォルト値はASC
	・order by句がない場合の順序は、実行するまでわからない
		↑DBMSで管理されている空き領域に適宜格納される為(登録時)
		↑DBの内部環境や、内部処理ロジックに依存する
		↑定義された順序での抽出が必要な場合は、必ずorder by句を使用する
	
*/
select * 
	from kakeibo
	order by output desc;
	
	--ちなみに列番号でも指定できる(SELECT文に記述した順に１から数える)
	--列番号はあまり使う機会はないが、UNIONなどの集合演算子で使うことがある
mysql> SELECT * from kakeibo order by 4 desc, 5 desc;
+------------+-----------------+--------------------------+--------+--------+
| date_time  | items           | memos                    | input  | output |
+------------+-----------------+--------------------------+--------+--------+
| 2013-02-10 | 給料            | １月の給料               | 280000 |      0 |
| 2013-02-25 | 居住費          | 3月の家賃                |      0 |  90000 |
| 2013-02-18 | 水道光熱費      | 1月の電気代              |      0 |   7500 |
| 2013-02-14 | 交際費          | 同期会の会費             |      0 |   5000 |
| 2013-02-11 | 教養娯楽費      | 書籍を購入               |      0 |   2800 |
| 2013-02-03 | 食費            | カフェラテを購入         |      0 |    380 |
+------------+-----------------+--------------------------+--------+--------+
6 rows in set (0.00 sec)

mysql> SELECT * from kakeibo order by 4 desc;
+------------+-----------------+--------------------------+--------+--------+
| date_time  | items           | memos                    | input  | output |
+------------+-----------------+--------------------------+--------+--------+
| 2013-02-10 | 給料            | １月の給料               | 280000 |      0 |
| 2013-02-03 | 食費            | カフェラテを購入         |      0 |    380 |
| 2013-02-11 | 教養娯楽費      | 書籍を購入               |      0 |   2800 |
| 2013-02-14 | 交際費          | 同期会の会費             |      0 |   5000 |
| 2013-02-18 | 水道光熱費      | 1月の電気代              |      0 |   7500 |
| 2013-02-25 | 居住費          | 3月の家賃                |      0 |  90000 |
+------------+-----------------+--------------------------+--------+--------+



/*
	【LIMIT】
	・先頭から数行だけ取得する	
	・offsetで先頭から数件除外
		↑例えば、結果の11~15行目を取得する場合は、
		LIMIT 5, OFFSET 10を指定する
	・order by句と一緒に利用されることが多い
	・Oracle DBなどの商用DBはLIMIT句が存在しない
	・order by句の後に記述
*/


SELECT * 
	from kakeibo
	order by 4 desc, 5 desc 
	limit 2 offset 2;
	
+------------+-----------------+--------------------+-------+--------+
| date_time  | items           | memos              | input | output |
+------------+-----------------+--------------------+-------+--------+
| 2013-02-18 | 水道光熱費      | 1月の電気代        |     0 |   7500 |
| 2013-02-14 | 交際費          | 同期会の会費       |     0 |   5000 |
+------------+-----------------+--------------------+-------+--------+




/*
	
	【集合演算子】
	・SELECT文と一緒に使う
	・和集合(UNION)、差集合(EXCEPT)、積集合(INTERSECT)の３つ
	・３つともALLを使える→重複を許す
	・集合演算子を使える条件は、列数とデータ型が一致していること
	・列数が足りない場合はNULLで補えば列数を合わせることができる
	・差集合(EXCEPT)だけ、SELECT文の順番に気をつける
	・UNIONもDISTINCTも内部で並び替えを行っている為、大量のメモリを消費する
		→DBMSにとって並び替えはかなりの負荷になる
	
	※ order by句を使う場合の注意点
		・order by句は最後のselect文に記述する
		・列名は最初のselect文で指定した列名かつ順序にする
	
	
*/



-- UNION
-- 1つのテーブルに格納されたデータを異なる条件で抽出する場合も使える
-- そうすることによって、SQLの実行回数を抑えることが可能

mysql> select * from 家計簿
	 union
	 select * from 家計簿アーカイブ;
+------------+-----------------+--------------------------+-----------+-----------+
| 日付       | 費目            | メモ                     | 入金額    | 出金額    |
+------------+-----------------+--------------------------+-----------+-----------+
| 2012-12-10 | 給料            | １１月の給料             |    280000 |         0 |
| 2012-12-18 | 水道光熱費      | 水道代                   |         0 |      4200 |
| 2012-12-24 | 食費            | レストラン雅             |         0 |      5000 |
| 2012-12-25 | 居住費          | １月の家賃支払い         |         0 |     80000 |
| 2013-01-10 | 給料            | １２月の給料             |    280000 |         0 |
| 2013-01-13 | 教養娯楽費      | スッキリシネマズ         |         0 |      2800 |
| 2013-01-13 | 食費            | 新年会                   |         0 |      5000 |
| 2013-01-25 | 居住費          | ２月の家賃支払い         |         0 |     80000 |
| 2013-02-03 | 食費            | コーヒーを購入           |         0 |       380 |
| 2013-02-10 | 給料            | １月の給料               |    280000 |         0 |
| 2013-02-11 | 教養娯楽費      | 書籍を購入               |         0 |      2800 |
| 2013-02-14 | 交際費          | 同期会の会費             |         0 |      5000 |
| 2013-02-18 | 水道光熱費      | １月の電気代             |         0 |      7560 |
+------------+-----------------+--------------------------+-----------+-----------+


--【EXCEPT, MINUS】
--MySQLでは使えない
--OracleDBではMINUSを使う

mysql> select 費目 from 家計簿
    -> except
    -> select 費目 from 家計簿アーカイブ;


--【INTERSECT】
--共通項のみ抽出
--MySQLでは使えない
mysql> select 費目 from 家計簿
    -> intersect
    -> select 費目 from 家計簿アーカイブ;


