/*
	【セッションスコープ】
	・セッションスコープ = HttpSessionインスタンス
	・JavaBeansもクラス(利用する際はインスタンス)
	・つまり、インスタンスの中にインスタンスをいれてる感じ
	
	
	・セッションスコープに保存したインスタンスは、ブラウザを閉じるか、明示的にインスタンスを削除するまで自由に使える
	・レスポンス後も生きるため、リダイレクト後も使える
	
	リクエストスコープ : HttpServletRequestインスタンスのgetAttribut()とか、setAttribute()
	セッションスコープ : HttpServletRequestインスタンスのgetSession()をすると、
					javax.servlet.http.HttpSession型のインスタンスを取得できる
					↑これでセッションスコープを操作する
					↑というより、これがセッションスコープの正体(HttpSession)
					
	・セッションスコープはユーザー毎(ブラウザ毎)作成される
	・getSession()のタイミングでセッションIDが発行され、
		アプリサーバーはHttpSessionインスタンスとブラウザに設定をすることで、両者の紐付けをする
	・それ以降、ブラウザはリクエストをするたびに、同時セッションIDを送る
	
	
	・クッキーはサーバー上で作成される。そしてレスポンスでブラウザに送り、ブラウザはクッキーを保存する
	・それ以降、ブラウザはリクエストを送る際にクッキーのデータを自動的にHTTPリクエストに付加して、送信するようになる
	・アプリサーバーはクッキーにセッションIDを含めることで、サーバーとブラウザを紐付けしている
	・クッキーの有効期限を明示的に伸ばすことによって、ブラウザの開閉問わず、セッションの有効期限をコントロールすることが可能
	
	
	・HttpSessionインスタンスはガベージコレクションの対象とならない(サーバーが判断できないため)
		↑の場合の対策として、一定時間利用されていなければガベージコレクションの対象となる
										セッションタイムアウトというのが働く
	
	
*/

/*
	【JavaBeans】
	・Javaクラスの独立性を高める為のインスタンス(HttpServletRequestのインスタンス)
	・関連する情報をひとかたまりにして保持または使い回すことも目的としている
	・JavaBeans(というインスタンス)を、スコープに保存するとjspで共有ができる
		→ request.setAttribute("String型", Object型); で登録
	・スコープに保存できるのはインスタンスのみで、int型のような基本データ型変数は入れられない
	・そしてスコープに入れるインスタンスはJavaBeans(実体はただのルールがいくつか決まっているクラス)
	・スコープは４種類あり、種類によって有効期限が異なる
		①ページスコープ : ???
		②リクエストスコープ : リクエスト同時(かつリクエスト毎)に生成され、レスポンス(ブラウザに返すこと)と同時に破棄される
					 : リクエストをまたいでインスタンスを共有できない
		③セッションスコープ : 
		④アプリケーションスコープ : 

	
*/
