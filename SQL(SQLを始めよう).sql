/*
	【SQLの共通ルール】
	① : 文の途中に開業を入れられる
	② : 行の先頭や行の途中に半角の空白を入れられる
	
	改行を適切に入れて見やすくする(しっかりと整形する)
	予約語を大文字、小文字どちらでも同じ意味になるが、それを区別するかはOSや設定によって異なる
	
	SQL文はプログラムからドライバを通してDBMSへネットワークと通して送られる
	DBMSでSQL文を解釈し、中にあるデータベースファイル(単なるファイル)の中身を書き換える
	
	【４大命令】
	・構造と修飾語(whereなど)をしっかり把握する
	・ほとんどのデータ操作(テーブルやカラムじゃないよ)はSELECT, UPDATE, DALETE, INSERTで実現される
	・DML(Data Manipulation Language)と呼ばれる
	・最低限のSQL文として完成しているものをSQL文という
	・from 000 や where 000 をfrom句やwhere句という
	
	【覚え方１】
	・検索系(SELECT)、更新系(INSERT, DELETE, UPDATE)を理解すると覚えやすい
	・更新系は実行結果が常に成功か失敗の２通りで、表が返されることはない
	・更新系はp53の「検索結果の加工(一番右)」に当たる処理ができない(表が返ってくるわけではないので)
	
	【覚え方２】
	・既存系(SELECT, UPDATE, DELETE)、新規系(INSERT)
	・INSERTは新規なので、WHEREが使えない
	
	【覚え方３】
	・4大命令は全て処理対象とするテーブル名を指定する必要がある
	・テーブル名より先に記述があるのはSELECT文のみ
	
	
*/


/*家計簿
+------------+-----------------+--------------------------+--------+--------+
| date_time  | items           | memos                    | input  | output |
+------------+-----------------+--------------------------+--------+--------+
| 2013-02-03 | 食費            | カフェラテを購入         |      0 |    380 |
| 2013-02-10 | 給料            | １月の給料               | 280000 |      0 |
| 2013-02-11 | 教養娯楽費      | 書籍を購入               |      0 |   2800 |
| 2013-02-14 | 交際費          | 同期会の会費             |      0 |   5000 |
| 2013-02-18 | 水道光熱費      | 1月の電気代              |      0 |   7500 |
| 2013-02-25 | 居住費          | 3月の家賃                |      0 |  90000 |
+------------+-----------------+--------------------------+--------+--------+

*/


/*挿入(insert)*/
insert into kakeibo --全てのカラムに挿入する場合に限って最初の()を省略できる
	values(
			'2013-02-25', --各データのことを'リテラル'という
			"居住費"  , 
			"3月の家賃",
			0,
			85000
		);
/*
	最初の()に明示的にカラム名を示す場合は順序は任意。
	ただし、values()の中のデータは最初の()に合わせた順序にしなければいけない
	(※最初の()を省略した場合はデータの順序はカラム順にしないといけない)
*/




/*データ(row)を更新*/
-- すでにテーブルに存在するデータを書き換える為の命令
update kakeibo
	set memos = "カフェラテを購入" --文字列はクォーテーションで括る(日本語はダブルクォーテーションで)
	where date_time = '2013-02-03'; --setの行は"set句"という
	--date型はクォーテーションが必要
	--フォーマット形式が決まっている
	--where句のないupdate文は全件更新！(使う頻度まれ！)
	
	/*
		日付リテラルは各DBMSで取り扱いが比較的大きい
		・日付リテラルとしてどのような記述を許すか
		・日付に関するデータ型の名前や制度
		・日付に関して利用できる命令(関数)の種類
		
	*/
	

/*データを削除(delete)*/
-- すでに存在しているデータ(行)を丸ごと(１行)削除！
-- 列(カラム、フィールド)を削除するものではない！
-- where句を入れない場合は全件削除！
	
	
	
	
/*テーブル追加*/
-- Javaと同じようにデータ型をあらかじめ決めることで、変な値を格納されないようにしている(型安全)
-- 数値型、文字列型、日付型のデータ型は全てのDBに必ず用意されているが、型の名称やフォーマット形式はDB毎に異なる
-- charは郵便番号や社員番号 varcharは名前や住所などが向いている
create table kakeibo(
		date_time date,
		items char(30), --charは固定長(あらかじめ箱のサイズを決めておく)
		memos varchar(255),--varcharは可変長(最大値だけ決めておく)
		input int,
		output int
		);




/*SELECT文*/
select items as "項目" --select文において、列名やテーブル名の後ろにasを使うことで任意の名前をつけられる(asは任意)
		from kakeibo --↑mysqlではなぜかできなかった
		where output > 2000;		

/*
	↑の出力結果
	+-----------------+
	| 項目            |
	+-----------------+
	| 教養娯楽費      |
	| 交際費          |
	| 水道光熱費      |
	| 居住費          |
	+-----------------+
*/



	
	
/*
	【リテラルの記述に関するルール】
	・「'」で括らず記述されたリテラルは、数値情報として扱われる
	・「'」で括られたリテラルは、基本的に文字列情報として扱われる
	・「'」で括られ、'2013-02-25'のような一定の形式で記述されたリテラルは、日付情報として扱われる	
*/





